{
  "openapi": "3.0.0",
  "info": {
    "title": "Legal Research API",
    "description": "This is the backend of the Legal Reseach application and documented with Swagger",
    "contact": {
      "name": "Onur Eren Arpaci",
      "email": "onurerenarpaci@hotmail.com"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080/"
    }
  ],
  "paths": {
    "/users/": {
      "get": {
        "summary": "Get all the collegues of the user.",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get a certain collegue of the user.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete a certain collegue account. Needs domain-admin access.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/query/": {
      "post": {
        "summary": "Search for a document.",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "requestBody": {
          "in": "body",
          "required": true,
          "description": "This endpoint receives the question as a string and allows the requester to set additional parameters that will be passed on to the Haystack pipeline.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        }
      }
    },
    "/notes/": {
      "get": {
        "summary": "Gets all notes of the user.",
        "description": "Notes are objects that contain a `from`and `to` values that determine what part of the document is higlighted. It can be used to represent a highlighted text without any note taken, but also a highlight with a note.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Creates a new note.",
        "description": "Notes are objects that contain a `from`and `to` values that determine what part of the document is higlighted. It can be used to represent a highlighted text without any note taken, but also a highlight with a note.  <br>  <ul>  <li>You need to provide a document id in `document` field, which this `Note` is taken on.</li>  <li>Also, `from` and `to` fields, which indicates start and end of the highlighted text.</li>  <li>`content` is the actual note that user had written. It can be empty, since user may prefer to just highlight the text.</li>   </ul>  ⚠️ Beware that notes when first created are created into the `Global Space`, which is the default space where every `Bookmark`and `Note`is located if user doesn",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "in": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostNoteRequest"
              }
            }
          }
        }
      }
    },
    "/notes/{id}": {
      "patch": {
        "summary": "Updates a note.",
        "description": "⚠️ Note that this endpoint is not for changing the space which this note is in. Use `POST /spaces/:spaceId/notes/:noteId` endpoint for this. ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "in": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchNoteRequest"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes a note.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/spaces/": {
      "get": {
        "summary": "Get all the spaces which the user created or added to.",
        "description": "Spaces are models that represent a project/folder, in which `Note`s and `Bookmark`s within are related to a certain case or project. This feature is useful since user can group different stuff.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create a new space.",
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/spaces/{spaceId}": {
      "delete": {
        "summary": "Delete a space.",
        "description": "",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/spaces/{spaceId}/notes/{noteId}": {
      "post": {
        "summary": "Move a note to a space.",
        "description": "When a `Note` is first created, it is located in user\\'s `Global Space`. After user creates `Space`s, they can move their notes to these different spaces.    </br>  </br>  ⚠️ To move a `Note` back to the user\\'s `Global Space`, you need to provide the user\\'s id instead of space id, in the `spaceId` field.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/spaces/{spaceId}/notes": {
      "get": {
        "summary": "Get all the notes in a space.",
        "description": "",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/spaces/{spaceId}/bookmarks/{bookmarkId}": {
      "post": {
        "summary": "Move a bookmark to a space.",
        "description": " When a `Bookmark` is first created, it is located in user\\'s `Global Space`. After user creates `Space`s, they can move their bookmarks to these different spaces.  </br>  </br>  ⚠️ To move a `Bookmark` back to the user\\'s `Global Space`, you need to provide the user\\'s id instead of space id, in the `spaceId` field.",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bookmarkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/spaces/{spaceId}/users/{userId}": {
      "post": {
        "summary": "Add a collegue to a space.",
        "description": "",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Add a collegue to a space.",
        "description": "",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/spaces/{spaceId}/bookmarks": {
      "get": {
        "summary": "Get all the bookmarks in a space.",
        "description": "",
        "parameters": [
          {
            "name": "spaceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/bookmarks/": {
      "get": {
        "summary": "Gets all bookmarks of the user.",
        "description": "Bookmarks are objects which will allow users to bookmark ceration documents, so that they can keep track of their work. Multiple bookmarks for a single document may be created, because each of these bookmarks may belong to different `Space`s.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Creates a new bookmark.",
        "description": "Bookmarks are objects which will allow users to bookmark ceration documents, so that they can keep track of their work. Multiple bookmarks for a single document may be created, because each of these bookmarks may belong to different `Space`s.   </br>  </br>  ⚠️ Beware that bookmarks when first created are created into the `Global Space`, which is the default space where every `Bookmark`and `Note`is located if user doesn",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "document": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/bookmarks/{id}": {
      "delete": {
        "summary": "Deletes a bookmark.",
        "description": "⚠️ Beware that this endpoint is not for changing the space which this `Bookmark` is in. Use `POST /spaces/:spaceId/bookmarks/:bookmarkId` endpoint for this. ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/documents/{id}": {
      "get": {
        "summary": "Get the content of a specific document.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "QueryRequest": {
        "title": "QueryRequest",
        "required": [
          "query"
        ],
        "type": "object",
        "properties": {
          "query": {
            "title": "Query",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "object"
          },
          "debug": {
            "title": "Debug",
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "PostNoteRequest": {
        "title": "PostNoteRequest",
        "required": [
          "from",
          "to",
          "content"
        ],
        "type": "object",
        "properties": {
          "document": {
            "title": "Document Id",
            "type": "string",
            "default": "documentId"
          },
          "from": {
            "title": "From",
            "type": "number"
          },
          "to": {
            "title": "To",
            "type": "number"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        }
      },
      "PatchNoteRequest": {
        "title": "PatchNoteRequest",
        "required": [
          "from",
          "to",
          "content"
        ],
        "type": "object",
        "properties": {
          "from": {
            "title": "From",
            "type": "number"
          },
          "to": {
            "title": "To",
            "type": "number"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}